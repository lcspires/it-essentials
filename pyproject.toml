[project]
name = "hands-on"
version = "0.1.0"
description = "Master the basics."
authors = [
    {name = "Lucas Pires",email = "lucasopf95@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11,<3.14"
dependencies = [
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
isort = "^6.0.1"
black = "^25.1.0"
ruff = "^0.12.12"
pydocstyle = "^6.3.0"
mypy = "^1.17.1"
pytest = "^8.4.2"
pre-commit = "^4.3.0"

[tool.black]
line-length = 88          	# Máximo 88 caracteres por linha
target-version = ['py313'] 	# Usa sintaxe do Python 3.13
include = '\.pyi?$'       	# Aplica a arquivos .py e .pyi
extend-exclude = '''
/(
    \.git                # Ignora pasta .git
  | \.hg                 # Ignora pasta .hg (Mercurial)
  | \.mypy_cache         # Ignora cache do mypy
  | \.pytest_cache       # Ignora cache do pytest
  | \.ruff_cache         # Ignora cache do ruff
  | \.venv               # Ignora ambientes virtuais
  | build                # Ignora pasta build
  | dist                 # Ignora pasta dist
)/
'''

[tool.ruff]
line-length = 88          # Mesmo comprimento do Black
target-version = "py313"  # Sintaxe Python 3.13
select = [                # Quais regras verificar
    "E", "F", "W",        # Erros básicos, falhas, avisos
    "I",                  # Ordenação de imports
    "C",                  # Complexidade de código
    "B",                  # Riscos de bugs
    "A",                  # Código assíncrono
    "N",                  # Convenções de nomes
    "UP",                 # Recursos modernos do Python
    "PL",                 # Regras estilo Pylint
    "RUF",                # Regras específicas do Ruff
]
ignore = ["E501"]         		# Ignora erro de linha longa (Black cuida)
unfixable = ["T201", "T203"] 	# Não tenta corrigir prints (T201=print, T203=pprint)

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  		# Ignora imports não usados em __init__.py

[tool.mypy]
python_version = "3.13"     	# Usa tipos do Python 3.13
warn_return_any = true      	# Avisa se função retorna "any" (tipo indefinido)
warn_unused_configs = true  	# Avisa configurações não usadas
disallow_untyped_defs = true 	# Exige tipos em todas as definições de função
disallow_incomplete_defs = true # Exige tipos completos (sem "..."")
check_untyped_defs = true   	# Verifica mesmo funções sem tipos
disallow_untyped_calls = true 	# Exige tipos em chamadas de função

[tool.pytest.ini_options]
testpaths = ["tests"]       	# Onde procurar testes
python_files = ["test_*.py"] 	# Padrão: arquivos que começam com "test_"
python_classes = ["Test*"]   	# Padrão: classes que começam com "Test"
python_functions = ["test_*"] 	# Padrão: funções que começam com "test_"
addopts = ["-v", "--tb=short"] 	# Opções padrão: verbose + traceback curto

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D203", "D213"]
# Usa estilo Google de documentação
# Ignora certas regras:
# D100 = Missing docstring in public module
# D104 = Missing docstring in public package
# D203 = 1 blank line required before class docstring
# D213 = Multi-line docstring summary should start at the second line